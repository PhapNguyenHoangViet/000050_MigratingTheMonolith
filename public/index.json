[
{
	"uri": "//localhost:1313/2-preparation/1-createkeypair/",
	"title": "Create Key Pair",
	"tags": [],
	"description": "",
	"content": "Create Key Pair Go to Amazon EC2 console. On the left navigation bar, click Key Pairs. Click Create key pair. In the Create key pair page In the Name section, type KPforDevAxInstances In the Key pair type section, Select RSA In the Private key file format section, select .pem -Click Create key pair Save file key pair to use in the next step. "
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction In this lab you learn how to deploy our fictitious web application TravelBuddy to run on AWS.\nTravelBuddy is a simple Java Springboot application.\nTopics Covered By the end of this lab, you will be able to:\nUse the AWS Console to deploy and verify AWS resources using an AWS CloudFormation template. Use AWS Tools for Eclipse to deploy a Java Application to an Elastic Beanstalk environment. Install and configure the AWS Elastic Beanstalk CLI tool. Use the AWS Elastic Beanstalk CLI to deploy an update to an existing Elastic Beanstalk environment. Use the AWS SDK to query and modify the AWS environment using code. Environment All the resources required to begin this lab have already been provisioned and set up for you. If running in your own account, use this CloudFormation template The following diagram depicts the resources that were deployed in your AWS account.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Migrating the Monolith",
	"tags": [],
	"description": "",
	"content": "Oveview In this lab you learn how to deploy our fictitious web application TravelBuddy to run on AWS.\nContent: Introduction Preparation Test locally by Eclipse IDE Deploy to ElasticBeanstalk Update the application Query the API use Eclipse IDE Clean up resources "
},
{
	"uri": "//localhost:1313/2-preparation/2-createacloudformationstack/",
	"title": "Create a CloudFormation stack",
	"tags": [],
	"description": "",
	"content": "Create a CloudFormation stack We will use below file template to create CloudFormation stack. The template defines : A VPC named CdkStack/DevAxNetworkVPC: 2 Public Subnet 2 Private Subnet 2 NAT gateways An EC2 Instance named DevAxWindowsHost A RDS named ad12azpxp74wamj User awsstudent Template File Module1.yaml (39 KB)\nDownload file Module1.yaml. Go to Amazon CloudFormation Console. Click Stacks Click Create stack. In the Specify template section. Select Upload a template file Click Choose file, then select file Module1.yaml we downloaded. Click Next. In the Stack name section, type aws-stack-for-Devax. In the Stack name section, seclect KPforDevAxInstances. Click Next. In the Configure stack options page, Drag the screen down, then Click Next.\nIn the Review aws-stack-for-Devax page. Drag the screen down, then Click I acknowledge that AWS CloudFormation might create IAM resources with custom names. Click Create stack.\nCloudformation will take 5 minutes to deploy Web App. Wait until all stacks are shown in a CREATE_COMPLETE state.\nCheck the VPC was created Go to Amazon VPC Console. Click Your VPCs. We will see a VPC named CdkStack/DevAxNetworkVPC Click Subnets. type CdkStack/DevAxNetworkVPC into the search bar. Press Enter We will see 4 Subnets Click NAT Gateways. type CdkStack/DevAxNetworkVPC into the search bar. Press Enter We will see 2 NAT gateways Create CloudFormation stack Check EC2 Instance was created Go to Amazon EC2 console. Click Instances. type DevAxWindowsHost into the search bar. Press Enter We will see an EC2 Instance named DevAxWindowsHost Check AWS RDS was created Go to Amazon RDS console. Click Databases. We will see new Databases "
},
{
	"uri": "//localhost:1313/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Overview In this section, we will create the Key Pair, create the CloudFormation stack, Connect to the Windows instance, Setup the Database and download Project.\nContent: Create the Key Pair Create the CloudFormation stack Connect to the Windows instance Setup the Database Download the Project "
},
{
	"uri": "//localhost:1313/2-preparation/3-connecttothewindowsinstance/",
	"title": "Connect to the Windows Instance",
	"tags": [],
	"description": "",
	"content": "Connect to the Windows Instance Go to Amazon EC2 console. On the left navigation bar, click Intances. Select DevAxWindowsHost. Click Connect.\nIn the Connect to instance page\nClick tab RDP client. Click Download remote desktop file. We will download file remote desktop to the folder contains the key pair. Click Get password. In the Get Windows password page: Click Browse. Select file KPforDevAxInstances.pem we downloaded in the section 1.1. Click Decrypt Password to decrypt the password. Copy decrypted password .\nOpen file DevAxWindowsHost.rdp we downloaded in the step 2.\nClick Connect. Type the password we copied in the step 4 Click OK. Click Don’t ask me again for connections to this computer. Click Yes. Connect successfully. Configure AWS CLI Assign the Administrator Access to user awsstudent was created by Cloud Formation template Go to AWS IAM Console. Click Users. Click user awsstudent In the Permissions policies section Click Add permissions In the Add permissions to awsstudent page Click Attach existing policies directly Type AdministratorAccess to the search bar. Select AdministratorAccess Click Next:Review Click Add Permission\nClick tab Security credentials\nClick Create access key to create the access key Click Download .csv file to save Access key and Secret access key to use in the next steps\nExecute the below command:\naws configure set profile.devaxacademy.region \u0026lt;your_region\u0026gt;\raws configure set profile.devaxacademy.aws_access_key_id \u0026lt;access_key_id\u0026gt;\raws configure set profile.devaxacademy.aws_secret_access_key \u0026lt;secret_access_key\u0026gt; Change \u0026lt;your_region\u0026gt; by Region code Change \u0026lt;access_key_id\u0026gt; by Access Key Id we saved in the step 6 Change \u0026lt;secret_access_key\u0026gt; by Secret Access Key we saved in the step 6\n"
},
{
	"uri": "//localhost:1313/3-testlocallybyeclipseide/",
	"title": "Test locally by Eclipse IDE",
	"tags": [],
	"description": "",
	"content": "Test locally by Eclipse IDE In this section, we will open the project and update the database connectivity configuration, then launch the project in the local development environment to test that the project is building and connecting to the database correctly.\nOpen IDE Eclipse\nIn the Menu section, Click File Click Import…\nIn the Import section, Click Maven\nClick Existing Maven Projects Click Next In the Import Maven Projects section Click Browse Select folder TravelBuddy Click Finish You will need to wait for Maven to pull down all the required project packages. The completion percentage will be displayed in the bottom right corner.\nGo to the Project Explorer tab and open the file whose the path is TravelBuddy/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml Click Source Locate the code below \u0026lt;beans:bean id=\u0026#34;dataSource\u0026#34; class=\u0026#34;org.apache.tomcat.jdbc.pool.DataSource\u0026#34;\rdestroy-method=\u0026#34;close\u0026#34;\u0026gt;\t\u0026lt;beans:property name=\u0026#34;driverClassName\u0026#34; value=\u0026#34;com.mysql.jdbc.Driver\u0026#34; /\u0026gt;\r\u0026lt;beans:property name=\u0026#34;url\u0026#34; value=\u0026#34;${JDBC_CONNECTION_STRING}\u0026#34; /\u0026gt;\r\u0026lt;beans:property name=\u0026#34;username\u0026#34; value=\u0026#34;${JDBC_UID}\u0026#34; /\u0026gt;\r\u0026lt;beans:property name=\u0026#34;password\u0026#34; value=\u0026#34;${JDBC_PWD}\u0026#34; /\u0026gt;\t\u0026lt;beans:property name=\u0026#34;jdbcInterceptors\u0026#34; value=\u0026#34;com.amazonaws.xray.sql.mysql.TracingInterceptor\u0026#34; /\u0026gt;\r\u0026lt;/beans:bean\u0026gt; Do not edit this code, but note that this code uses environment variables to configure the server and username/password to a MySQL database. When you execute this code on the server, these environment variables allow you to, at execution time, access the correct server.\nYou must set these environment variables or the application will fail.\nIn this lab you will set these variables to allow local execution with remote access to the RDS instance running the TravelBuddy database. Later after you transfer to the application to AWS Elastic Beanstalk, you will learn how to set these variables as configuration parameters in the Elastic Beanstalk environment.\nIn the Menu section, Click Window Click Show view Click Servers You may need to use the Other… feature to select the Servers view if it is not offered in the initial listing.\nIn the Servers section Click No servers are available. Click this link to create a new server… In the Define a New Server section Click Apache Click Tomcat v9.x Server Click Next On the workspace, the Tomcat server is located in a hidden directory so copy and paste the following into the directory address bar C:\\ProgramData\\Tomcat9 Click Finish Open the file whose the path is Servers \u0026gt; Tomcat v9.x Server at localhost-config/context.xml Paste the following code above the last line \u0026lt;/ Context\u0026gt; \u0026lt;!-- Environment variables --\u0026gt;\r\u0026lt;Parameter name=\u0026#34;JDBC_CONNECTION_STRING\u0026#34; value=\u0026#34;jdbc:mysql://\u0026lt;RDSEndpoint\u0026gt;:3306/travelbuddy?useSSL=false\u0026#34; override=\u0026#34;false\u0026#34;/\u0026gt;\r\u0026lt;Parameter name=\u0026#34;JDBC_UID\u0026#34; value=\u0026#34;root\u0026#34; override=\u0026#34;false\u0026#34;/\u0026gt;\r\u0026lt;Parameter name=\u0026#34;JDBC_PWD\u0026#34; value=\u0026#34;labpassword\u0026#34; override=\u0026#34;false\u0026#34;/\u0026gt; Change by RDS endpoint\nSave file Right click on folder project Click Run As Click Run on Server If you don’t see the option of Run on Server, right click on your project folder, click Maven, click Update Project… and click OK.\nIn the Run On Server section Select Tomcat v9.0 server at localhost Click Finish In a few moments, the IDE-integrated browser should appear, and you will see the TravelBuddy app open. The application will display data that has been retrieved from the RDS instance running in AWS. "
},
{
	"uri": "//localhost:1313/4-deploy/",
	"title": "Deploy Application to ElasticBeanstalk",
	"tags": [],
	"description": "",
	"content": "Deploy to ElasticBeanstalk Now that we know the app runs, you will create a new environment in AWS using Elastic Beanstalk and host our TravelBuddy web application there so that it can be accessed by users on the Internet. Elastic Beanstalk removes the burden of provisioning and managing web-based applications. Your application can be migrated to Elastic Beanstalk without any modification, so this is the easiest way to migrate the existing application.\nBuild a WAR file Stop the Tomcat server running locally Click teminate icon Right click on the folder project Click Export Click WAR file In the WAR Export section Click Browser Select a suitable location to store the WAR file. You will need to access this file again. Click Finish Create the Elastic beanstalk application Go to AWS Elastic Beanstalk console. Click Create Aplication.\nIn the Application name section, type TravelBuddy Select Tomcat is platform\nIn the Application code section, select Upload your code In the Source code origin section Select Local file Click Choose file Select file travelbuddy.war we created Click Configure more options\nIn the Presets section, Click High availability\nIn the Network section, Click Edit\nIn the VPC section, select CdkStack/DevAxNetworkVPC\nThis will change the configuration to support multiple web servers behind an Elastic Load Balancer and implement auto-scaling.\nIn the Load balancer settings section Select Public for Visibility In the Load balancer subnets section, select 2 Public Subnets\nIn the Instance subnets section, select 2 Private subnets.\nDrag the screen down, then Click Save\nIn the Security section, Click Edit\nIn the EC2 key pair section, select key pair KPforDevAxInstances Click Save\nIn the Instances section, Click Edit\nIn the EC2 security groups section, select the security group named DBSecurityGroup Click Save\nIn the Capacity section, Click Edit\nIn the Instance type section, select t3.medium\nDrag the screen down, then Click Save\nIn the Software section, Click Edit\nIn the Environment properties table, add the information like the below table\nName Value JDBC_CONNECTION_STRING\tjdbc:mysql://[RDSEndpoint]:3306/travelbuddy?useSSL=false JDBC_UID\troot JDBC_PWD\tlabpassword Click Save Deploy to ElasticBeanstalk\nDrag the screen down, then Click Create app Elastic Beanstalk will now proceed with creating the new Environment to run your TravelBuddy website. This will take a few minutes while an Elastic Load Balancer, EC2 instance, Launch configuration, Security Groups and more are created for you by AWS Elastic Beanstalk.\nOnce the deployment is complete Click Environments We will see the URL of TravelBuddy app "
},
{
	"uri": "//localhost:1313/2-preparation/4-setupthedatabase/",
	"title": "Setup the Database",
	"tags": [],
	"description": "",
	"content": "Setup the Database Connect to the Windows Instance, open the command prompt Execute the below command, change \u0026lt;rds_host\u0026gt; by RDS endpoint mysql -u root --password=labpassword -h \u0026lt;rds_host\u0026gt; Execute the below command to select the database named travelbuddy use travelbuddy Execute the below command to watch the tables in the database. show tables; We will see 2 tables in the database "
},
{
	"uri": "//localhost:1313/2-preparation/5-downloadproject/",
	"title": "Download Project",
	"tags": [],
	"description": "",
	"content": "Download Project TravelBuddy.zip (4866 KB)\nRight click on file TravelBuddy.zip and select copy link address\nOpen Google Chrome in virtual machine\npaste that copied link in the address bar of the browser. Press Enter to download the files. Extract the downloaded file TravelBuddy.zip "
},
{
	"uri": "//localhost:1313/5-updatetheapplication/",
	"title": "Update the application",
	"tags": [],
	"description": "",
	"content": "Update the application You have just deployed onto the AWS Elastic Beanstalk environment. Let’s assume that your manager has just informed you that a change to the application is required by the business owner, and you need to make a code change, build a new WAR file and push that to the Beanstalk application environment.\nAWS Elastic Beanstalk has a rich variety of ways you can do this, but if you are new to Elastic Beanstalk you are likely tempted to use the manual method. While this might work for low volumes of change, you also need to consider that documentation will need to be written so that any operations staff can correctly apply the updates.\nA preferred method would be to automate the deployment, but how would you automate deployments to Elastic Beanstalk?\nTo solve this problem we move to the command line and use a tool specifically created to automate the deployments of Beanstalk applications.\nUpdate project TravelBuddy In the Eclipse IDE, open the file TravelBuddy/src/main/webapp/WEB-INF/views/index.jsp Search for the text Alpaca and change to Go pack Save the file In the Eclipse IDE, Use the Ctrl+Alt+Shift+T keyboard shortcut to open the terminal\nIn the Launch Terminal section\nIn the Choose terminal section, select Local Terminal Click OK In the terminal, Change your directory to folder TravelBuddy project\nExecute the below command to Build a new deployable version of the application using Maven.\nmvn package Execute the below command to Switch to the deployable contents directory and initialise the contents for Elastic Beanstalk deployment cd target\\\\travelbuddy\reb init --profile devaxacademy For Select a default region, enter the appropriate number to match the region you are using and hit enter. For Select an application to use, enter the appropriate number to match the TravelBuddy and hit enter. If you receive a message Cannot setup CodeCommit because there is no Source Control setup, continuing with initialization, you can safely ignore the message. Execute the command below to upload your newly built deployment to your Beanstalk environment. eb deploy --profile devaxacademy Now, wait for the deployment to complete. You can monitor the progress in the terminal window as the artefact is uploaded, and then Elastic Beanstalk updates the environment. You will also see the progress of the update reflected in the AWS Elastic Beanstalk console, once the upload is complete. When the update finishes, verify the change you made to the index.jsp page is now present in the publicly-visible website.\nVisit Web page, we will see the updated text appears in the carousel. "
},
{
	"uri": "//localhost:1313/6-query/",
	"title": "Update the application",
	"tags": [],
	"description": "",
	"content": "Update the application You have just deployed onto the AWS Elastic Beanstalk environment. Let’s assume that your manager has just informed you that a change to the application is required by the business owner, and you need to make a code change, build a new WAR file and push that to the Beanstalk application environment.\nAWS Elastic Beanstalk has a rich variety of ways you can do this, but if you are new to Elastic Beanstalk you are likely tempted to use the manual method. While this might work for low volumes of change, you also need to consider that documentation will need to be written so that any operations staff can correctly apply the updates.\nA preferred method would be to automate the deployment, but how would you automate deployments to Elastic Beanstalk?\nTo solve this problem we move to the command line and use a tool specifically created to automate the deployments of Beanstalk applications.\nUpdate project TravelBuddy In the Eclipse IDE, open the file TravelBuddy/src/main/webapp/WEB-INF/views/index.jsp Search for the text Alpaca and change to Go pack Save the file In the Eclipse IDE, Use the Ctrl+Alt+Shift+T keyboard shortcut to open the terminal\nIn the Launch Terminal section\nIn the Choose terminal section, select Local Terminal Click OK In the terminal, Change your directory to folder TravelBuddy project\nExecute the below command to Build a new deployable version of the application using Maven.\nmvn package Execute the below command to Switch to the deployable contents directory and initialise the contents for Elastic Beanstalk deployment cd target\\\\travelbuddy\reb init --profile devaxacademy For Select a default region, enter the appropriate number to match the region you are using and hit enter. For Select an application to use, enter the appropriate number to match the TravelBuddy and hit enter. If you receive a message Cannot setup CodeCommit because there is no Source Control setup, continuing with initialization, you can safely ignore the message. Execute the command below to upload your newly built deployment to your Beanstalk environment. eb deploy --profile devaxacademy Now, wait for the deployment to complete. You can monitor the progress in the terminal window as the artefact is uploaded, and then Elastic Beanstalk updates the environment. You will also see the progress of the update reflected in the AWS Elastic Beanstalk console, once the upload is complete. When the update finishes, verify the change you made to the index.jsp page is now present in the publicly-visible website.\nVisit Web page, we will see the updated text appears in the carousel. "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]